# STOP BLINKY TAPE WARNING LIGHTS
function stop_warning {
    rosservice call /warning_lights "{'colors': [{'r': 0, 'b': 0, 'g': 0}], 'frequency': 0.0, 'on': false}"
}

# CONTROL MOTORS
function motor {
    if [[ $# -eq 6 ]]; then
        echo surge-starboard: $1
        echo surge-port: $2
        echo sway-bow: $3
        echo sway-stern: $4
        echo heave-bow: $5
        echo heave-stern: $6
        echo -e '\nRotating motors...'
        rostopic pub -r 1 /electrical_interface/motor controls/motorCommands "{cmd_surge_starboard: $1, cmd_surge_port: $2, cmd_sway_bow: $3, cmd_sway_stern: $4, cmd_heave_bow: $5, cmd_heave_stern: $6}"
    elif [[ $# -eq 1 ]]; then
        echo surge-starboard: $1
        echo surge-port: $1
        echo sway-bow: $1
        echo sway-stern: $1
        echo heave-bow: $1
        echo heave-stern: $1
        echo -e '\nRotating motors...'
        rostopic pub -r 1 /electrical_interface/motor controls/motorCommands "{cmd_surge_starboard: $1, cmd_surge_port: $1, cmd_sway_bow: $1, cmd_sway_stern: $1, cmd_heave_bow: $1, cmd_heave_stern: $1}"
    else
        echo 'Usage: motor [surge-starboard] [surge-port] [sway-bow] [sway-stern] [heave-bow] [heave-stern]'
        echo 'All arguments are values between -500 and 500'
        echo -e '\nStopping motors...'
        rostopic pub -1 /electrical_interface/motor controls/motorCommands "{cmd_surge_starboard: 0, cmd_surge_port: 0, cmd_sway_bow: 0, cmd_sway_stern: 0, cmd_heave_bow: 0, cmd_heave_stern: 0}"
    fi
}

# CONTROL SET POINTS
function setpoints {
    rate='1'
    xPosActive='0'
    yPosActive='0'
    yawActive='0'
    pitchActive='0'
    xSpeedActive='0'
    ySpeedActive='0'
    yawSpeedActive='0'
    depthActive='0'
    depthSpeedActive='0'
    xPos='0'
    yPos='0'
    yaw='0'
    pitch='0'
    xSpeed='0'
    ySpeed='0'
    yawSpeed='0'
    depth='0'
    depthSpeed='0'
    frame='/sensors/IMU_global_reference'

    while [ $# -gt 0 ]
    do
        case $1 in
            -r|--rate) rate=$2; shift;;
            -y|--yaw) yawActive='1'; yaw=$2; shift;;
            -p|--pitch) pitchActive='1'; pitch=$2; shift;;
            -d|--depth) depthActive='1'; depth=$2; shift;;
            --yawSpeed) yawSpeedActive='1'; yawSpeed=$2; shift;;
            --depthSpeed) depthSpeedActive='1'; depthSpeed=$2; shift;;
            --xPos) xPosActive='1'; xPos=$2; shift;;
            --yPos) yPosActive='1'; yPos=$2; shift;;
            --xSpeed) xSpeedActive='1'; xSpeed=$2; shift;;
            --ySpeed) ySpeedActive='1'; ySpeed=$2; shift;;
            -f|--frame) frame=$2; shift;;
            (*) echo 'Usage: setPoints'
                echo '       [--xPos]'
                echo '       [--yPos]'
                echo '       [-y | --yaw]'
                echo '       [-p | --pitch]'
                echo '       [--xSpeed]'
                echo '       [--ySpeed]'
                echo '       [--yawSpeed]'
                echo '       [-d | --depth]'
                echo '       [--depthSpeed]'
                echo '       [-f | --frame]'
                echo '       [-r | --rate]'
                return 1;;
        esac
        shift
    done

    echo "XPos:       isActive: $xPosActive   data: $xPos"
    echo "YPos:       isActive: $yPosActive   data: $yPos"
    echo "Yaw:        isActive: $yawActive   data: $yaw"
    echo "Pitch:      isActive: $pitchActive   data: $pitch"
    echo "XSpeed:     isActive: $xSpeedActive   data: $xSpeed"
    echo "YSpeed:     isActive: $ySpeedActive   data: $ySpeed"
    echo "YawSpeed:   isActive: $yawSpeedActive   data: $yawSpeed"
    echo "Depth:      isActive: $depthActive   data: $depth"
    echo "DepthSpeed: isActive: $depthSpeedActive   data: $depthSpeed"
    echo "Frame:      $frame"

    echo -e "\nSetting points..."
    rostopic pub -r $rate /setPoints planner/setPoints "{XPos: {isActive: $xPosActive, data: $xPos}, YPos: {isActive: $yPosActive, data: $yPos}, Yaw: {isActive: $yawActive, data: $yaw}, Pitch: {isActive: $pitchActive, data: $pitch}, XSpeed: {isActive: $xSpeedActive, data: $xSpeed}, YSpeed: {isActive: $ySpeedActive, data: $ySpeed}, YawSpeed: {isActive: $yawSpeedActive, data: $yawSpeed}, Depth: {isActive: $depthActive, data: $depth}, DepthSpeed: {isActive: $depthSpeedActive, data: $depthSpeed}, Frame: $frame}"
}

function calibrate_camera {
    size='12x8'
    square='0.03'
    image=''
    camera=''

    while [ $# -gt 0 ]
    do
        case $1 in
            -s|--size) size=$2; shift;;
            -q|--square) square=$2; shift;;
            -c|--camera) camera=$2; shift;;
            -i|--image) image=$2; shift;;
            (*) echo 'Usage: calibrateCamera'
                echo '       [-s | --size] WIDTHxHEIGHT of the chessboard'
                echo '       [-q | --square] size of the squares in meters'
                echo '       [-c | --camera] the node name of the camera'
                echo '       [-i | --image] the topic name of the image'
                return 1;;
        esac
        shift
    done

    if [ -z "$camera" ]; then
	echo "Please specify a camera"        
	calibrateCamera -h
	return 1
    fi

    if [ -z "$image" ]; then
	image="$camera/image_raw"
    fi	

    echo "Calibrating $camera through $image using $size grid of $square m squares"
    rosrun camera_calibration cameracalibrator.py --size $size --square $square image:=$image camera:=$camera
}
function image_view {
    topic=''
    compressed=''

    while [ $# -gt 0 ]
    do
        case $1 in
            -c) compressed="_image_transport:=\"compressed\"";;
            -t) topic=$2; shift;;
            (*) echo 'Usage: image_view'
                echo '       [-c] Using compressed image'
                echo '       [-t VALUE] Topic to subscrib'
                return 1;;
        esac
        shift
    done

    if [ -z "$topic" ]; then
	echo "Please a camera topic"        
	image_view -h
	return 1
    fi
    
    if [ -z "$compressed" ]; then
        echo "Viewing raw image from $topic"
    else
        echo "Viewing compressed image from $topic"
    fi
    
    rosrun image_view image_view image:=$topic $compressed
}


