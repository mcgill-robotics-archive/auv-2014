#!/usr/bin/env python

import rospy
from std_msgs.msg import Int16
from std_msgs.msg import Float64

# Filter window
WINDOW_WIDTH = 20
THRESHOLD = 0.30
depths = [0.0] * WINDOW_WIDTH
depth = 0.0
counter = 0

def depth_filter(sensor_reading):
    global depth
    global counter
    depth_reading = sensor_reading

    # Calculations
    current_depth = ((depth_reading * max_arduino_voltage / max_analog / resistance - base_current) / current_range) * max_depth - offset
    current_depth = current_depth / 100.0   # To meters
    clipped_depth = current_depth

    # Get depths
    depths_tmp = list(depths)
    depths_tmp.sort()
    median = (depths_tmp[WINDOW_WIDTH/2] + depths_tmp[(WINDOW_WIDTH+1)/2]) / 2.0

    # if counter >= WINDOW_WIDTH:
    #     # Apply Filters
    #     if abs(current_depth - median) > THRESHOLD :
    #         clipped_depth = median
    # else:
    #     counter = counter + 1

    if counter <= WINDOW_WIDTH:
        counter += 1

    depths.append(clipped_depth)

    depth = depth + (clipped_depth - depths.pop(0)) / WINDOW_WIDTH

    return current_depth, depth


def depthCallBack(sensor_reading):
    current_depth, depth = depth_filter(sensor_reading.data)

    # Publish
    pub1.publish(current_depth)
    pub2.publish(depth)

def init():
    global pub1
    global pub2
    global max_analog
    global max_arduino_voltage
    global resistance
    global base_current
    global current_range
    global max_depth
    global offset


    rospy.init_node('depth_node')
    rospy.Subscriber('electrical_interface/depth', Int16, depthCallBack)
    pub1 = rospy.Publisher('state_estimation/rawDepth', Float64)
    pub2 = rospy.Publisher('state_estimation/filteredDepth', Float64)

    # Constants
    max_analog = 1023  			# in bits
    max_arduino_voltage = 3300 	# in mV
    resistance = 150.0 			# In ohms. Set to the value of the resistor being used. Should be less than 250 ohms because 5V / 20mA (max current) = 250 omhs.
    base_current = 4.0
    current_range = 16.0   		# from 4.0 mA to 20.0 mA
    max_depth = 914.4      		# In centimeters. 30 feet
    offset = 16.          		# Just substract it. May need to be recalculated when circuit is built.

    rospy.spin()


if __name__ == '__main__':
    try:
       init()
    except rospy.ROSInterruptException:
	   pass
