#!/usr/bin/env python

import rospy
import numpy as np
from std_msgs.msg import Int16
from std_msgs.msg import Float64


def depth_filter(sensor_reading):
    global counter
    depth_reading = sensor_reading

    # Calculations
    current_depth = ((depth_reading * max_arduino_voltage / max_analog / resistance - base_current) / current_range) * max_depth + OFFSET
    current_depth = current_depth / 100.0   # To meters

    # Add Depth
    depths.append(current_depth)
    if counter <= WINDOW_WIDTH:
        counter+=1
    else:
        depths.pop(0)

    # Get depths
    median = np.median(depths)

    return current_depth, median


def depthCallBack(sensor_reading):
    global WINDOW_WIDTH, OFFSET, depths
    while not rospy.has_param('/depth/'):
        pass

    WINDOW_WIDTH = int(rospy.get_param('/depth/window'))
    OFFSET = rospy.get_param('/depth/offset')

    if (WINDOW_WIDTH != len(depths)):
        depths = [0.0] * WINDOW_WIDTH

    current_depth, depth = depth_filter(sensor_reading.data)

    # Publish
    pub1.publish(current_depth)
    pub2.publish(depth)


def init():
    global pub1
    global pub2
    global max_analog
    global max_arduino_voltage
    global resistance
    global base_current
    global current_range
    global max_depth
    global depths
    global counter
    global OFFSET, WINDOW_WIDTH

    rospy.init_node('depth_node')

    while not rospy.has_param('/depth/'):
        pass

    WINDOW_WIDTH = int(rospy.get_param('/depth/window'))
    OFFSET = rospy.get_param('/depth/offset')

    rospy.Subscriber('electrical_interface/depth', Int16, depthCallBack)
    pub1 = rospy.Publisher('state_estimation/rawDepth', Float64)
    pub2 = rospy.Publisher('state_estimation/filteredDepth', Float64)

    # Constants
    max_analog = 1023           # in bits
    max_arduino_voltage = 3300  # in mV
    resistance = 150.0          # In ohms. Set to the value of the resistor being used. Should be less than 250 ohms because 5V / 20mA (max current) = 250 omhs.
    base_current = 4.0
    current_range = 16.0        # from 4.0 mA to 20.0 mA
    max_depth = 914.4           # In centimeters. 30 feet
    depths = [0.0] * WINDOW_WIDTH
    counter = 0

    rospy.spin()


if __name__ == '__main__':
    try:
       init()
    except rospy.ROSInterruptException:
       pass
