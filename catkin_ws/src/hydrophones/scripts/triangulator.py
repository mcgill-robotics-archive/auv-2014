import math

def triangulate(d, sx, sy, sz):
	try:
		# FIRST SOLUTION
		x0 = (d * d * sy - sx * (d * d * sz * sz + d * d * sy * sy - d * d * sz * sy - d * d * sy * sx + math.pow(sx, 3) * sy - math.pow(d, 4) + sy * math.pow(sz, 3) - sy * sy * sz * sz + d * d * sx * sx - sx * sx * sy * sy + math.sqrt(4 * math.pow(sy, 4) * sx * sx * d * d + math.pow(sx, 4) * sy * sy * d * d - 2 * math.pow(sy, 5) * sx * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sx, 3) * math.pow(sy, 3) * d * d - 4 * sx * sx * sy * sy * math.pow(d, 4) + 3 * sy * sy * math.pow(d, 6) - math.pow(sx, 4) * math.pow(sy, 4) + 2 * math.pow(sx, 3) * math.pow(sy, 5) - math.pow(sy, 6) * sx * sx - 4 * math.pow(d, 4) * math.pow(sy, 4) - math.pow(sy, 4) * math.pow(sz, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx - 4 * sy * sy * sz * sz * math.pow(d, 4) + sy * sy * math.pow(sz, 4) * d * d - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + 4 * sx * sx * sy * sy * sz * sz * d * d + 2 * math.pow(sx, 3) * sy * sy * math.pow(sz, 3) - 2 * d * d * sy * sy * sx * math.pow(sz, 3) + 2 * math.pow(d, 4) * sz * sy * sy * sx - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sz * sz - 2 * d * d * math.pow(sy, 5) * sz)) / (-sy * sy - sx * sx - sz * sz + d * d) - d * d * sx + sx * sy * sy - sx * sx * sy) / d / sy / 2
		y0 = -(d * d * sz * sz + d * d * sy * sy - d * d * sz * sy - d * d * sy * sx + math.pow(sx, 3) * sy - math.pow(d, 4) + sy * math.pow(sz, 3) - sy * sy * sz * sz + d * d * sx * sx - sx * sx * sy * sy + math.sqrt(4 * math.pow(sy, 4) * sx * sx * d * d + math.pow(sx, 4) * sy * sy * d * d - 2 * math.pow(sy, 5) * sx * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sx, 3) * math.pow(sy, 3) * d * d - 4 * sx * sx * sy * sy * math.pow(d, 4) + 3 * sy * sy * math.pow(d, 6) - math.pow(sx, 4) * math.pow(sy, 4) + 2 * math.pow(sx, 3) * math.pow(sy, 5) - math.pow(sy, 6) * sx * sx - 4 * math.pow(d, 4) * math.pow(sy, 4) - math.pow(sy, 4) * math.pow(sz, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx - 4 * sy * sy * sz * sz * math.pow(d, 4) + sy * sy * math.pow(sz, 4) * d * d - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + 4 * sx * sx * sy * sy * sz * sz * d * d + 2 * math.pow(sx, 3) * sy * sy * math.pow(sz, 3) - 2 * d * d * sy * sy * sx * math.pow(sz, 3) + 2 * math.pow(d, 4) * sz * sy * sy * sx - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sz * sz - 2 * d * d * math.pow(sy, 5) * sz)) / (-sy * sy - sx * sx - sz * sz + d * d) / d / 2
		z0 = (d * d * sy - sz * (d * d * sz * sz + d * d * sy * sy - d * d * sz * sy - d * d * sy * sx + math.pow(sx, 3) * sy - math.pow(d, 4) + sy * math.pow(sz, 3) - sy * sy * sz * sz + d * d * sx * sx - sx * sx * sy * sy + math.sqrt(4 * math.pow(sy, 4) * sx * sx * d * d + math.pow(sx, 4) * sy * sy * d * d - 2 * math.pow(sy, 5) * sx * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sx, 3) * math.pow(sy, 3) * d * d - 4 * sx * sx * sy * sy * math.pow(d, 4) + 3 * sy * sy * math.pow(d, 6) - math.pow(sx, 4) * math.pow(sy, 4) + 2 * math.pow(sx, 3) * math.pow(sy, 5) - math.pow(sy, 6) * sx * sx - 4 * math.pow(d, 4) * math.pow(sy, 4) - math.pow(sy, 4) * math.pow(sz, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx - 4 * sy * sy * sz * sz * math.pow(d, 4) + sy * sy * math.pow(sz, 4) * d * d - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + 4 * sx * sx * sy * sy * sz * sz * d * d + 2 * math.pow(sx, 3) * sy * sy * math.pow(sz, 3) - 2 * d * d * sy * sy * sx * math.pow(sz, 3) + 2 * math.pow(d, 4) * sz * sy * sy * sx - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sz * sz - 2 * d * d * math.pow(sy, 5) * sz)) / (-sy * sy - sx * sx - sz * sz + d * d) - d * d * sz + sy * sy * sz - sy * sz * sz) / d / sy / 2

		# SECOND SOLUTION
		x1 = (d * d * sy + sx * (math.pow(d, 4) - d * d * sx * sx - d * d * sz * sz + d * d * sx * sy + d * d * sz * sy - sy * math.pow(sz, 3) + sy * sy * sx * sx - sy * math.pow(sx, 3) + sy * sy * sz * sz - d * d * sy * sy + math.sqrt(-math.pow(sy, 4) * math.pow(sx, 4) - math.pow(sy, 4) * math.pow(sz, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + math.pow(sx, 4) * sy * sy * d * d - 4 * sy * sy * sx * sx * math.pow(d, 4) - 4 * sy * sy * sz * sz * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sx, 3) * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + math.pow(sz, 4) * sy * sy * d * d + 4 * math.pow(sy, 4) * sx * sx * d * d + 3 * sy * sy * math.pow(d, 6) - 4 * math.pow(sy, 4) * math.pow(d, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx + 4 * sz * sz * sy * sy * sx * sx * d * d - 2 * d * d * math.pow(sy, 5) * sx - 2 * d * d * math.pow(sy, 5) * sz + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sx, 3) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sx * sx - math.pow(sy, 6) * sz * sz + 2 * sy * sy * math.pow(sz, 3) * math.pow(sx, 3) - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + 2 * math.pow(d, 4) * sx * sy * sy * sz - 2 * d * d * sx * sy * sy * math.pow(sz, 3))) / (d * d - sy * sy - sx * sx - sz * sz) - d * d * sx + sy * sy * sx - sy * sx * sx) / d / sy / 2;
		y1 = (math.pow(d, 4) - d * d * sx * sx - d * d * sz * sz + d * d * sx * sy + d * d * sz * sy - sy * math.pow(sz, 3) + sy * sy * sx * sx - sy * math.pow(sx, 3) + sy * sy * sz * sz - d * d * sy * sy + math.sqrt(-math.pow(sy, 4) * math.pow(sx, 4) - math.pow(sy, 4) * math.pow(sz, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + math.pow(sx, 4) * sy * sy * d * d - 4 * sy * sy * sx * sx * math.pow(d, 4) - 4 * sy * sy * sz * sz * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sx, 3) * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + math.pow(sz, 4) * sy * sy * d * d + 4 * math.pow(sy, 4) * sx * sx * d * d + 3 * sy * sy * math.pow(d, 6) - 4 * math.pow(sy, 4) * math.pow(d, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx + 4 * sz * sz * sy * sy * sx * sx * d * d - 2 * d * d * math.pow(sy, 5) * sx - 2 * d * d * math.pow(sy, 5) * sz + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sx, 3) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sx * sx - math.pow(sy, 6) * sz * sz + 2 * sy * sy * math.pow(sz, 3) * math.pow(sx, 3) - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + 2 * math.pow(d, 4) * sx * sy * sy * sz - 2 * d * d * sx * sy * sy * math.pow(sz, 3))) / (d * d - sy * sy - sx * sx - sz * sz) / d / 2;
		z1 = (d * d * sy + sz * (math.pow(d, 4) - d * d * sx * sx - d * d * sz * sz + d * d * sx * sy + d * d * sz * sy - sy * math.pow(sz, 3) + sy * sy * sx * sx - sy * math.pow(sx, 3) + sy * sy * sz * sz - d * d * sy * sy + math.sqrt(-math.pow(sy, 4) * math.pow(sx, 4) - math.pow(sy, 4) * math.pow(sz, 4) + 4 * math.pow(sy, 4) * sz * sz * d * d + math.pow(sx, 4) * sy * sy * d * d - 4 * sy * sy * sx * sx * math.pow(d, 4) - 4 * sy * sy * sz * sz * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sx, 3) * d * d + 2 * math.pow(sy, 3) * sx * math.pow(d, 4) - 2 * math.pow(sy, 3) * math.pow(sz, 3) * d * d + 2 * math.pow(sy, 3) * sz * math.pow(d, 4) + math.pow(sz, 4) * sy * sy * d * d + 4 * math.pow(sy, 4) * sx * sx * d * d + 3 * sy * sy * math.pow(d, 6) - 4 * math.pow(sy, 4) * math.pow(d, 4) - math.pow(sx, 4) * sy * sy * sz * sz - math.pow(sz, 4) * sy * sy * sx * sx + 4 * sz * sz * sy * sy * sx * sx * d * d - 2 * d * d * math.pow(sy, 5) * sx - 2 * d * d * math.pow(sy, 5) * sz + d * d * math.pow(sy, 6) + 2 * math.pow(sy, 5) * math.pow(sx, 3) + 2 * math.pow(sy, 5) * math.pow(sz, 3) - math.pow(sy, 6) * sx * sx - math.pow(sy, 6) * sz * sz + 2 * sy * sy * math.pow(sz, 3) * math.pow(sx, 3) - 2 * d * d * sz * sy * sy * math.pow(sx, 3) + 2 * math.pow(d, 4) * sx * sy * sy * sz - 2 * d * d * sx * sy * sy * math.pow(sz, 3))) / (d * d - sy * sy - sx * sx - sz * sz) - d * d * sz + sy * sy * sz - sy * sz * sz) / d / sy / 2;

		coordinates = [[x0, y0, z0], [x1, y1, z1]]

		return coordinates

	except:
		return 'degenerate triangle'

d = 100
sx = -312
sy = -323
sz = -321

print triangulate(d, sx, sy, sz)
