Controls Node Documentation
Jan 27, 2014
Nick Speal

#-----------------------------------------------------------------------------------------------


#testing Controls in isolation (recommended)




#Main Launch File
#	-Starts simulator and roscore
#	-runs controls node
#	-runs testControls node (replaces planner functionality of publishing /setPoints)
#	-loads parameters from file controlsParameters.yaml 
roslaunch controls testControls.launch

#make sure depth is being published
rosrun controls gazeboDepthEstimator

#specify the current task (gate, here) (replaces Planner functionality of publishing /currentCVTask_Front)
rosrun planner CurrentCVTaskPublisher

#Replace CV functionality of publishing to /front_cv_data
rosrun planner distanceCalculator

#Note: Controls waits in an infinite loop until all the relevant inputs are published. Once distanceCalculator is published, the real controller starts.


#-----------------------------------------------------------------------------------------------


#Testing Controls with other nodes (untested as of Jan 27 - I expect planner will work)



#	-First make sure the simulator and roscore are running

#Load parameters from a file: 
rosparam load controlsParameters.yaml #note this is untested. Not sure if we need to specify the filepath to the controls package?

#Run the main controls node:
rosrun controls controls

#Then other nodes can be run, depending on what you want to replace:

#make sure depth is being published (always needs to be done as of Jan 27)
rosrun controls gazeboDepthEstimator


#Replaces Planner Functionality (See notes below)
rosrun planner CurrentCVTaskPublisher
rosrun controls testControls

#Replaces CV Functionality (always need to be done as of Jan 27)
rosrun planner distanceCalculator


#-----------------------------------------------------------------------------------------------


Planner notes

2 temporary nodes were created to emulate planner functionality:
CurrentCVTaskPublisher
	Publishes on a topic /currentCVTask_Front
	Publishes on topic /currentCVTask_Down
	Both use custom message (Defined on the MEDN computer but I forgot to push and I forgot the name)
	uses pseudo-enumerator functionality of specifying what task we are on. 
	distanceCalculator subscribes to this, but only has gate functionality for now.

testControls
	Publishes on a topic called /setPoints
	Publishes values and isActive for each dimension
	Typical Values:
		Depth: 9
		Positions: in the range of -5 to 5
		Speeds: in the range of -10 to 10

